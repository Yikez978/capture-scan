#!/usr/bin/env python
# Name: capture-scan.py
# Author: Mark Spicer
# Purpose: Reads a packet capture and then port scans each unique host.

# Import necessary modules.
import argparse         # Used to parse command line arguements.
import csv              # Used to parse csv files.
import ipaddress        # Used to validate an IP address.
from scan import *      # Import scan class from file.

"""
Functions
"""
def check_unique(ip, unique_ips):
    # Check if the IP address exists in the list.
    if ip in unique_ips:
        next
    else:
        # Validate IP address before adding it to the list.
        try:
            ipaddress.ip_network(unicode(ip))
            unique_ips.append(ip)
        except Exception,e:
            print "\t%s" %e

def print_results(threads):
    # Print out data generated by the nmap scans.
    for t in threads:
        # Wait for the thread to finish before accessing data.
        t.join()
        nm = t.results()

        # Iterate through each host and print out info.
        for host in nm.all_hosts():
            print('----------------------------------------------------')
            print('Host : %s (%s)' % (host, nm[host].hostname()))
            print('State : %s' % nm[host].state())

            for proto in nm[host].all_protocols():
                print('----------')
                print('Protocol : %s' % proto)

                lport = nm[host][proto].keys()
                lport.sort()
                for port in lport:
                    print('port : %s\tstate : %s' %
                        (port, nm[host][proto][port]['state']))

"""
Main Program
"""
# Parse command line arguements passed to the script.
parser = argparse.ArgumentParser(description='Reads a packet capture and \
                                then port scans each unique host.')
parser.add_argument('-i, --input', dest='input_file',
                    help='Capture file to parse.')
args = parser.parse_args()

# Script variables.
unique_ips = []     # A list used to store unique IP addresses.
count = 0           # A counter used to create threads.
threads = []        # A list used to hold active threads.

# Open captured input file and check which IP addresses are unique.
with open(args.input_file, 'rb') as csvfile:
    capture = csv.DictReader(csvfile)
    for row in capture:
        check_unique(row['Source'], unique_ips)
        check_unique(row['Destination'], unique_ips)

# Create a new thread for each unique IP address and scan that host.
for ip in unique_ips:
    try:
        ip = str(ip)
        t = scan(count, "Thread-" + str(count), ip)
        threads.append(t)
        t.start()
        count += 1
    except Exception,e:
        print "\t%s" %e

# Print the results of the nmap scans.
print_results(threads)
